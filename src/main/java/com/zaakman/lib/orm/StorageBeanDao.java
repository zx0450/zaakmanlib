package com.zaakman.lib.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zaakman.lib.beans.StorageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORAGE_BEAN".
*/
public class StorageBeanDao extends AbstractDao<StorageBean, Long> {

    public static final String TABLENAME = "STORAGE_BEAN";

    /**
     * Properties of entity StorageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bztm = new Property(1, String.class, "bztm", false, "BZTM");
        public final static Property Vbeln = new Property(2, String.class, "vbeln", false, "VBELN");
        public final static Property Posnr = new Property(3, String.class, "posnr", false, "POSNR");
        public final static Property Bjbz = new Property(4, String.class, "bjbz", false, "BJBZ");
        public final static Property IsCheck = new Property(5, boolean.class, "isCheck", false, "IS_CHECK");
        public final static Property Zrkrq = new Property(6, String.class, "zrkrq", false, "ZRKRQ");
        public final static Property Zrksj = new Property(7, String.class, "zrksj", false, "ZRKSJ");
        public final static Property Zrkczr = new Property(8, String.class, "zrkczr", false, "ZRKCZR");
        public final static Property Zpm = new Property(9, String.class, "zpm", false, "ZPM");
        public final static Property FlagCode = new Property(10, String.class, "flagCode", false, "FLAG_CODE");
    }


    public StorageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StorageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BZTM\" TEXT," + // 1: bztm
                "\"VBELN\" TEXT," + // 2: vbeln
                "\"POSNR\" TEXT," + // 3: posnr
                "\"BJBZ\" TEXT," + // 4: bjbz
                "\"IS_CHECK\" INTEGER NOT NULL ," + // 5: isCheck
                "\"ZRKRQ\" TEXT," + // 6: zrkrq
                "\"ZRKSJ\" TEXT," + // 7: zrksj
                "\"ZRKCZR\" TEXT," + // 8: zrkczr
                "\"ZPM\" TEXT," + // 9: zpm
                "\"FLAG_CODE\" TEXT);"); // 10: flagCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StorageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bztm = entity.getBztm();
        if (bztm != null) {
            stmt.bindString(2, bztm);
        }
 
        String vbeln = entity.getVbeln();
        if (vbeln != null) {
            stmt.bindString(3, vbeln);
        }
 
        String posnr = entity.getPosnr();
        if (posnr != null) {
            stmt.bindString(4, posnr);
        }
 
        String bjbz = entity.getBjbz();
        if (bjbz != null) {
            stmt.bindString(5, bjbz);
        }
        stmt.bindLong(6, entity.getIsCheck() ? 1L: 0L);
 
        String zrkrq = entity.getZrkrq();
        if (zrkrq != null) {
            stmt.bindString(7, zrkrq);
        }
 
        String zrksj = entity.getZrksj();
        if (zrksj != null) {
            stmt.bindString(8, zrksj);
        }
 
        String zrkczr = entity.getZrkczr();
        if (zrkczr != null) {
            stmt.bindString(9, zrkczr);
        }
 
        String zpm = entity.getZpm();
        if (zpm != null) {
            stmt.bindString(10, zpm);
        }
 
        String flagCode = entity.getFlagCode();
        if (flagCode != null) {
            stmt.bindString(11, flagCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StorageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bztm = entity.getBztm();
        if (bztm != null) {
            stmt.bindString(2, bztm);
        }
 
        String vbeln = entity.getVbeln();
        if (vbeln != null) {
            stmt.bindString(3, vbeln);
        }
 
        String posnr = entity.getPosnr();
        if (posnr != null) {
            stmt.bindString(4, posnr);
        }
 
        String bjbz = entity.getBjbz();
        if (bjbz != null) {
            stmt.bindString(5, bjbz);
        }
        stmt.bindLong(6, entity.getIsCheck() ? 1L: 0L);
 
        String zrkrq = entity.getZrkrq();
        if (zrkrq != null) {
            stmt.bindString(7, zrkrq);
        }
 
        String zrksj = entity.getZrksj();
        if (zrksj != null) {
            stmt.bindString(8, zrksj);
        }
 
        String zrkczr = entity.getZrkczr();
        if (zrkczr != null) {
            stmt.bindString(9, zrkczr);
        }
 
        String zpm = entity.getZpm();
        if (zpm != null) {
            stmt.bindString(10, zpm);
        }
 
        String flagCode = entity.getFlagCode();
        if (flagCode != null) {
            stmt.bindString(11, flagCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StorageBean readEntity(Cursor cursor, int offset) {
        StorageBean entity = new StorageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bztm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vbeln
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // posnr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bjbz
            cursor.getShort(offset + 5) != 0, // isCheck
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zrkrq
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zrksj
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zrkczr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // zpm
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // flagCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StorageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBztm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVbeln(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosnr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBjbz(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsCheck(cursor.getShort(offset + 5) != 0);
        entity.setZrkrq(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZrksj(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZrkczr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setZpm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFlagCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StorageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StorageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StorageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
